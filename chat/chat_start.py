from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler, \
    CallbackQueryHandler
import requests

from db.banner_db import BannerDB
from db.client_db import ClientDB
from db.price_db import PriceDB
from db.product_db import ProductDB
from db.rent_db import RentDB
from models.client import Client
from models.payment_type import PaymentType
from models.period import Period
from models.rent import Rent
from models.rent_status import RentStatus
from models.status import Status
from utils.constants import TOKEN, ADMINS


def init_bot() -> None:
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ACTION: [MessageHandler(filters.TEXT, run_action)],
            HELP: [MessageHandler(filters.TEXT, run_help)],
            BOOKING: [CallbackQueryHandler(inline_options)],
            CLIENT: [MessageHandler(filters.TEXT, message_handler)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()


# Main Menu Responses
ACTION, HELP, BOOKING, CLIENT = range(4)


class ActionType:
    RENT = "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å üõµ"
    PRICE = "–¶–µ–Ω—ã üí∞"
    CONTACTS = "–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è"
    HELP = "–ü–æ–º–æ—â—å üÜò"
    ACCEPT = "–ü—Ä–∏–Ω–∏–º–∞—é ‚úÖ"
    CANCEL = "–û—Ç–º–µ–Ω–∞ ‚ùå"
    YES = "–î–∞ üëç"
    NO = "–ù–µ—Ç üëé"


class HelpOptions:
    HELP0 = "üóí –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã?"
    HELP1 = "üîë –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –º–æ–ø–µ–¥ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è?"
    HELP2 = "üöì –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –ø–æ–ø–∞–ª –≤ –î–¢–ü?"
    HELP3 = "‚öôÔ∏è –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —Å–ª–æ–º–∞–ª –º–æ–ø–µ–¥?"
    HELP4 = "‚è∞ –ß—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –≤–æ–≤—Ä–µ–º—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–æ–ø–µ–¥?"
    HELP5 = "üëÄ –ì–¥–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –º–æ–ø–µ–¥?"
    HELP6 = "üî¥ –ú–æ–≥—É –ª–∏ —è –±—Ä–∞—Ç—å –º–æ–ø–µ–¥ –ø–æ Kaspi Red?"
    HELP7 = "ü•∑ –ß—Ç–æ –µ—Å–ª–∏ —É–∫—Ä–∞–ª–∏ –º–æ–ø–µ–¥?"
    HELP8 = "üíµ –ö–∞–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏?"
    HELP9 = "üö™ –í—ã—Ö–æ–¥"


class ClientState:
    IDLE = "IDLE"
    LAST_NAME = "LAST_NAME"
    FIRST_NAME = "FIRST_NAME"
    IIN = "IIN"
    PHONE = "PHONE"
    SECOND_PHONE = "SECOND_PHONE"
    ADDRESS = "ADDRESS"
    PHOTO = "PHOTO"


main_keyboard = [[ActionType.RENT, ActionType.PRICE], [ActionType.CONTACTS, ActionType.HELP]]
payment_type_map = {
    PaymentType.KASPI_GOLD: "–û–ø–ª–∞—Ç–∞ —Å KaspiQR ü§≥",
    PaymentType.KASPI_RED: "Kaspi Red üî¥",
    PaymentType.CASH: "–ù–∞–ª–∏—á–Ω—ã–º–∏/–ü–µ—Ä–µ–≤–æ–¥ üíµ"
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {update.effective_user.full_name}!\n\n"
        "–Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ EasyGo. "
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –∞—Ä–µ–Ω–¥–æ–π –º–æ–ø–µ–¥–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ –ê—Å—Ç–∞–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(
            main_keyboard, one_time_keyboard=False, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        ),
    )
    client = Client(chat_id=update.effective_chat.id, username=update.effective_user.username)
    client_db = ClientDB()
    client_db.insert_client(client)
    context.user_data['state'] = ClientState.IDLE
    return ACTION


async def run_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    action = update.message.text
    match action:
        case ActionType.RENT:
            return await start_rent(update, context)

        case ActionType.PRICE:
            return show_price(update, context)

        case ActionType.CONTACTS:
            return await show_contacts(update, context)

        case ActionType.HELP:
            return await show_help_options(update, context)


class RentOptions:
    ACCEPT_RULES = "ACCEPT_RULES"
    DENY_RULES = "DENY_RULES"
    PRODUCT_TYPE = "PRODUCT_TYPE"
    CHOOSE_PRODUCT = "CHOOSE_PRODUCT"
    ACCEPT_PRODUCT = "ACCEPT_PRODUCT"
    DENY_PRODUCT = "DENY_PRODUCT"
    PERIOD = "PERIOD"
    PAYMENT_TYPE = "PAYMENT_TYPE"


async def inline_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    print("[inline_options]")
    print(query.data)
    if query.data.startswith(RentOptions.ACCEPT_RULES):
        return await choose_moped(update, context, query)
    elif query.data.startswith(RentOptions.DENY_RULES):
        return await query.edit_message_text(text=f"–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå\n–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è üòâ")
    elif query.data.startswith(RentOptions.PRODUCT_TYPE):
        return await show_products(update, context, query)
    elif query.data.startswith(RentOptions.CHOOSE_PRODUCT):
        return await show_product_by_number(update, context, query)
    elif query.data.startswith(RentOptions.DENY_PRODUCT):
        return await choose_moped(update, context, query)
    elif query.data.startswith(RentOptions.ACCEPT_PRODUCT):
        return await choose_period(update, context, query)
    elif query.data.startswith(RentOptions.PERIOD):
        return await choose_payment_method(update, context, query)
    elif query.data.startswith(RentOptions.PAYMENT_TYPE):
        context.user_data['rent_data'] = query.data
        title = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
        await query.edit_message_text(text=title)
        return await check_client(update, context)


async def start_rent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    rules = "–£—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã –º–æ–ø–µ–¥–∞ ‚¨áÔ∏è\n" \
            "1) –õ–∏—Ü–∞ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç (–ø—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å —É–¥–≤.–ª–∏—á–Ω–æ—Å—Ç–∏)\n" \
            "2) –ó–Ω–∞–Ω–∏–µ –ü–î–î\n" \
            "3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫—É—Ä—å–µ—Ä–æ–º –º–∏–Ω 1 –º–µ—Å—è—Ü (–¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤)"

    keyboard = [[InlineKeyboardButton(ActionType.ACCEPT, callback_data=RentOptions.ACCEPT_RULES),
                 InlineKeyboardButton(ActionType.CANCEL, callback_data=RentOptions.DENY_RULES)]]
    await update.message.reply_text(text=rules, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    return BOOKING


async def choose_moped(update: Update, context: ContextTypes.DEFAULT_TYPE, query) -> int:
    banners_db = BannerDB()
    banners = banners_db.get_all()
    product_db = ProductDB()
    products = product_db.get_all()
    title = "–í–´–ë–ï–†–ò–¢–ï –ú–û–î–ï–õ–¨ –ú–û–ü–ï–î–ê ‚¨áÔ∏è"
    keyboard = []
    for banner in banners:
        print(banner.product_type)
        left_count = 0
        total_count = 0
        for product in products:
            if banner.product_type == product.product_type:
                total_count = total_count + 1
                if product.status == Status.ACTIVE:
                    left_count = left_count + 1
        if left_count != 0:
            keyboard.append([InlineKeyboardButton(banner.model, callback_data=f"{RentOptions.PRODUCT_TYPE}_{banner.product_type}")])

    keyboard.append([InlineKeyboardButton(ActionType.CANCEL, callback_data=RentOptions.DENY_RULES)])
    await query.edit_message_text(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    return BOOKING


async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE, query) -> int:
    product_db = ProductDB()
    products = product_db.get_all()
    product_type = query.data.replace(f"{RentOptions.PRODUCT_TYPE}_", "")
    print(product_type)
    title = "–î–û–°–¢–£–ü–ù–´–ï –ú–û–ü–ï–î–´ ‚¨áÔ∏è"
    keyboard = []

    filtered_products = []
    for product in products:
        if product.product_type == product_type and product.status == Status.ACTIVE:
            filtered_products.append(product)

    for i in range(0, len(filtered_products), 2):
        product1 = filtered_products[i]
        try:
            product2 = filtered_products[i+1]
            inline_opt1 = InlineKeyboardButton(f"#Ô∏è‚É£ {product1.number}-{product1.model}", callback_data=f"{RentOptions.CHOOSE_PRODUCT}_{product1.number}")
            inline_opt2 = InlineKeyboardButton(f"#Ô∏è‚É£ {product2.number}-{product2.model}", callback_data=f"{RentOptions.CHOOSE_PRODUCT}_{product2.number}")
            keyboard.append([inline_opt1, inline_opt2])
        except:
            inline_opt = InlineKeyboardButton(f"#Ô∏è‚É£ {product1.number}-{product1.model}", callback_data=f"{RentOptions.CHOOSE_PRODUCT}_{product1.number}")
            keyboard.append([inline_opt])

    keyboard.append([InlineKeyboardButton(ActionType.CANCEL, callback_data=RentOptions.DENY_RULES)])
    await query.edit_message_text(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    return BOOKING


async def show_product_by_number(update: Update, context: ContextTypes.DEFAULT_TYPE, query) -> int:
    title = "–í–´ –£–í–ï–†–ï–ù–´ –ß–¢–û –•–û–¢–ò–¢–ï –í–´–ë–†–ê–¢–¨ –ò–ú–ï–ù–ù–û –≠–¢–û–¢ –ú–û–ü–ï–î?"
    product_db = ProductDB()
    product_number = query.data.replace(f"{RentOptions.CHOOSE_PRODUCT}_", "")
    product = product_db.get_product(product_number)
    for index, image in enumerate(product.images):
        title = title + f"\n{index + 1}) <a href='{image}'>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–æ–ø–µ–¥–∞</a>"

    keyboard = [[InlineKeyboardButton(ActionType.YES, callback_data=f"{RentOptions.ACCEPT_PRODUCT}_{product.number}"),
                 InlineKeyboardButton(ActionType.NO, callback_data=RentOptions.DENY_PRODUCT)]]
    await query.edit_message_text(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.HTML)
    return BOOKING


async def choose_period(update: Update, context: ContextTypes.DEFAULT_TYPE, query) -> int:
    product_db = ProductDB()
    product_number = query.data.replace(f"{RentOptions.ACCEPT_PRODUCT}_", "")
    product_type = product_db.get_product(product_number).product_type
    prices = PriceDB().get_by_product_type(product_type)
    data = f"{RentOptions.PERIOD}-{product_number}"

    title = "–í–´–ë–ï–†–ò–¢–ï –ü–ï–†–ò–û–î –ê–†–ï–ù–î–´ ‚¨áÔ∏è"

    keyboard = []
    for price in prices:
        keyboard.append([InlineKeyboardButton(f"{price.text} {'{:0,.2f}'.format(price.price)} ‚Ç∏", callback_data=f"{data}-{price.period}")])
    keyboard.append([InlineKeyboardButton(ActionType.CANCEL, callback_data=RentOptions.DENY_RULES)])
    await query.edit_message_text(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.HTML)
    return BOOKING


async def choose_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE, query) -> int:
    query_row = query.data.split('-')

    data = f"{RentOptions.PAYMENT_TYPE}-{query_row[1]}-{query_row[2]}"

    title = "–í–´–ë–ï–†–ò–¢–ï –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´ ‚¨áÔ∏è"

    keyboard = [
        [
            InlineKeyboardButton(payment_type_map[PaymentType.KASPI_GOLD], callback_data=f"{data}-{PaymentType.KASPI_GOLD}")
        ],
        [
            InlineKeyboardButton(payment_type_map[PaymentType.KASPI_RED], callback_data=f"{data}-{PaymentType.KASPI_RED}")
        ],
        [
            InlineKeyboardButton(payment_type_map[PaymentType.CASH], callback_data=f"{data}-{PaymentType.CASH}")
        ],
        [
            InlineKeyboardButton(ActionType.CANCEL, callback_data=RentOptions.DENY_RULES)
        ]
    ]
    await query.edit_message_text(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.HTML)
    return BOOKING


async def check_client(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    client_db = ClientDB()
    client = client_db.get_client(update.effective_chat.id.__str__())
    if client.lastname is None:
        return await enter_last_name(update, context)
    elif client.firstname is None:
        return await enter_first_name(update, context)
    elif client.iin is None:
        return await enter_iin(update, context)
    elif client.phone is None:
        return await enter_phone(update, context)
    elif client.second_phone is None:
        return await enter_second_phone(update, context)
    elif client.address is None:
        return await enter_address(update, context)
    else:
        context.user_data['state'] = ClientState.IDLE
        return await complete_rent(update, context)


async def complete_rent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    client = ClientDB().get_client(update.effective_chat.id.__str__())
    query_row = context.user_data["rent_data"].split('-')
    product_number = query_row[1]
    period = query_row[2]
    payment_type = query_row[3]
    product = ProductDB().get_product(product_number)
    prices = PriceDB().get_by_product_type(product.product_type)
    price = None
    for p in prices:
        if p.period == period:
            price = p
    now = datetime.now()
    start_date = now.strftime("%d/%m/%Y, %H:%M:%S")
    then = now + timedelta(days=price.days)
    end_date = then.strftime("%d/%m/%Y, %H:%M:%S")

    end_date_text = then.strftime("%d %b %Y, %H:%M")
    # f"<b>–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</b> {end_date_text} üóì\n" \

    user_price = price.price
    price_add_info = ""
    if payment_type == PaymentType.KASPI_RED:
        user_price = price.price / (1 - 0.125)
        price_add_info = " (—Å 12.5% Red)"


    title = f"<b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç</b> ‚úÖ\n"\
            f"<b>–ú–æ–ø–µ–¥:</b> #Ô∏è‚É£ {product.number} - {product.model}\n" \
            f"<b>–ü–µ—Ä–∏–æ–¥:</b> {price.text}\n" \
            f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_type_map[payment_type]}\n" \
            f"<b>–ò—Ç–æ–≥–æ:</b> <u>{'{:0,.2f}'.format(user_price)} ‚Ç∏{price_add_info}</u>"

    rent_db = RentDB()

    rent = Rent(
        chat_id=update.effective_chat.id,
        client_fullname=client.firstname + " " + client.lastname,
        product_number=product_number,
        product_type=product.product_type,
        start_date=start_date,
        end_date=end_date,
        price=price.price,
        payment_type=payment_type,
        rent_status=RentStatus.RESERVE
    )
    rent_db.insert(rent)

    for admin in ADMINS:
        try:
            req_body = f'https://api.telegram.org/bot' + TOKEN + '/sendMessage?chat_id=' + admin + '&parse_mode=HTML&text=' + title
            resp = requests.get(req_body)
            print(resp.content)
        except Exception as e:
            print(e)

    try:
        await update.callback_query.message.reply_text(title, parse_mode=ParseMode.HTML)
    except:
        await update.message.reply_text(title, parse_mode=ParseMode.HTML)
    return ACTION


async def enter_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é ‚úèÔ∏è"
    context.user_data['state'] = ClientState.LAST_NAME
    try:
        await update.callback_query.message.reply_text(title)
    except:
        await update.message.reply_text(title)
    return CLIENT


async def enter_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è ‚úèÔ∏è"
    context.user_data['state'] = ClientState.FIRST_NAME
    try:
        await update.callback_query.message.reply_text(title)
    except:
        await update.message.reply_text(title)
    return CLIENT


async def enter_iin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ù ‚úèÔ∏è"
    context.user_data['state'] = ClientState.IIN
    try:
        await update.callback_query.message.reply_text(title)
    except:
        await update.message.reply_text(title)
    return CLIENT


async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚úèÔ∏è"
    context.user_data['state'] = ClientState.PHONE
    try:
        await update.callback_query.message.reply_text(title)
    except:
        await update.message.reply_text(title)
    return CLIENT


async def enter_second_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∞—à–µ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚úèÔ∏è"
    context.user_data['state'] = ClientState.SECOND_PHONE
    try:
        await update.callback_query.message.reply_text(title)
    except:
        await update.message.reply_text(title)
    return CLIENT


async def enter_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ–º–∞ ‚úèÔ∏è"
    context.user_data['state'] = ClientState.ADDRESS
    try:
        await update.callback_query.message.reply_text(title)
    except:
        await update.message.reply_text(title)
    return CLIENT


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print("[message_handler]")
    print(update.effective_chat.id)
    try:
        print(context.user_data['state'])
    except:
        context.user_data['state'] = ClientState.IDLE

    if context.user_data['state'] != ClientState.IDLE:
        client_db = ClientDB()
        client = client_db.get_client(update.effective_chat.id.__str__())
        match context.user_data['state']:
            case ClientState.LAST_NAME:
                client.lastname = update.message.text
            case ClientState.FIRST_NAME:
                client.firstname = update.message.text
            case ClientState.IIN:
                client.iin = update.message.text
            case ClientState.PHONE:
                client.phone = update.message.text
            case ClientState.SECOND_PHONE:
                client.second_phone = update.message.text
            case ClientState.ADDRESS:
                client.address = update.message.text

        print(client)
        client_db.update_client(client)
        return await check_client(update, context)


def show_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    banner_db = BannerDB()
    product_db = ProductDB()
    banners = banner_db.get_all()
    products = product_db.get_all()
    price_db = PriceDB()

    for banner in banners:
        print(banner.product_type)
        left_count = 0
        total_count = 0
        for product in products:
            if banner.product_type == product.product_type:
                total_count = total_count + 1
                if product.status == Status.ACTIVE:
                    left_count = left_count + 1

        prices = price_db.get_by_product_type(banner.product_type)

        for price in prices:
            if price.period == Period.ONE_WEEK:
                banner.price_per_week = price.price

            if price.period == Period.ONE_DAY:
                banner.price_per_day = price.price

        banner.left_count = left_count
        banner.total_count = total_count

    for banner in banners:
        try:
            req_body = f'https://api.telegram.org/bot{TOKEN}/sendPhoto?chat_id={update.effective_chat.id}&caption={banner}&photo={banner.image}'
            resp = requests.get(req_body)
            print(resp.content)
        except Exception as e:
            print(e)
    return ACTION


async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    address = "–ù–∞—à –∞–¥—Ä–µ—Å: <a href='https://2gis.kz/astana/geo/9570784863354424'>–≥. –ê—Å—Ç–∞–Ω–∞, —É–ª. –£–ª—ã –¥–∞–ª–∞, –¥–æ–º 62</a>"
    contacts = "–¢–µ–ª. –Ω–æ–º–µ—Ä: [+77022021399](tel:+77022021399)" \
               "\n\n–î–æ–ø. –Ω–æ–º–µ—Ä: [+77779565737](tel:+77779565737)" \
               "\n\n–ò–Ω–∂–µ–Ω–µ—Ä: [+77477314023](tel:+77477314023)"
    await update.message.reply_text(text=address, parse_mode=ParseMode.HTML)
    await update.message.reply_text(text=contacts, parse_mode=ParseMode.MARKDOWN)
    return ACTION


async def show_help_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [[HelpOptions.HELP0], [HelpOptions.HELP1], [HelpOptions.HELP2], [HelpOptions.HELP3],
                      [HelpOptions.HELP4], [HelpOptions.HELP5], [HelpOptions.HELP7], [HelpOptions.HELP8],
                      [HelpOptions.HELP9]]
    await update.message.reply_text(
        "–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å"
        ),
    )
    return HELP


async def run_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    help_option = update.message.text
    reply_text = ""
    match help_option:
        case HelpOptions.HELP0:
            reply_text = "–£—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã –º–æ–ø–µ–¥–∞!\n" \
                         "1) –õ–∏—Ü–∞ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç (–ø—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å —É–¥–≤.–ª–∏—á–Ω–æ—Å—Ç–∏)\n" \
                         "2) –ó–Ω–∞–Ω–∏–µ –ü–î–î\n" \
                         "3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫—É—Ä—å–µ—Ä–æ–º –º–∏–Ω 1 –º–µ—Å—è—Ü (–¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤)\n" \
                         "4) –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞\n" \
                         "5) –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –º–æ–ø–µ–¥–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞ –ê—Å—Ç–∞–Ω–∞\n" \
                         "6) –ò–º–µ—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏ –º–æ–ø–µ–¥–∞ –Ω–∞ –Ω–æ—á—å. –ö –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –º–µ—Å—Ç–∞–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è:\n" \
                         "\t- —á–∞—Å—Ç–Ω—ã–π –¥–æ–º;\n" \
                         "\t- —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞;\n" \
                         "\t- –æ—Ö—Ä–∞–Ω—è–µ–º–æ–µ –ñ–ö —Å –∫–∞–º–µ—Ä–∞–º–∏, –æ—Ö—Ä–∞–Ω–æ–π, –∑–∞–±–æ—Ä–æ–º –≥–¥–µ –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–Ω–µ—Å—Ç–∏ –º–æ–ø–µ–¥ –±–µ–∑ –∫–ª—é—á–∞ –¥–æ–º–æ—Ñ–æ–Ω–∞. –ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–æ–∑–ª–µ –ø–æ–¥—å–µ–∑–¥–∞;\n" \
                         "7) –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–ö"

        case HelpOptions.HELP1:
            reply_text = f"1) –í—ã–∑–æ–≤–∏—Ç–µ –≥—Ä—É–∑–æ–≤–∏–∫ —á–µ—Ä–µ–∑ ‚Äú–Ø–Ω–¥–µ–∫—Å Go‚Äù –¥–æ <a href='https://2gis.kz/astana/geo/9570784863354424'>–£–ª—ã –î–∞–ª–∞ 62, –≥–∞—Ä–∞–∂ 9</a> (–û–ø—Ü–∏–π: –ë–µ–∑ –≥—Ä—É–∑—á–∏–∫–∞; –ú–∞–ª–µ–Ω—å–∫–∏–π –∫—É–∑–æ–≤. –û–ø–ª–∞—Ç–∏–º –≥—Ä—É–∑–æ–≤–∏–∫ –∑–∞ —Å–≤–æ–π —Å—á—ë—Ç, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω–∞ –≤—ã–∑–æ–≤–∞ –≥—Ä—É–∑–æ–≤–∏–∫–∞). –ú—ã —Å–¥–µ–ª–∞–µ–º –∑–∞–º–µ–Ω—É –º–æ–ø–µ–¥–∞.\n" \
                         f"2) –ï—Å–ª–∏ —É –í–∞—Å <b>–í–û –í–†–ï–ú–Ø –ó–ê–ö–ê–ó–ê</b> –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—Å—è –º–æ–ø–µ–¥, —Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ –∞–¥—Ä–µ—Å–∞ –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–æ–ø–ª–∞—Ç–∏–º –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞ —Å–≤–æ–π —Å—á—ë—Ç, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω–∞ –≤—ã–∑–æ–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Glovo/Wolt/–Ø–Ω–¥–µ–∫—Å).  "

        case HelpOptions.HELP2:
            reply_text = f"–ë–µ–∑ –ø–∞–Ω–∏–∫–∏. –ó–≤–æ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä–∞:\n" \
                         f"1) +77022021399\n" \
                         f"2) +77779565737"

        case HelpOptions.HELP3:
            reply_text = f"–ï—Å–ª–∏ –º–æ–ø–µ–¥ —Å–ª–æ–º–∞–Ω –ø–æ –í–∞—à–µ–π –≤–∏–Ω–µ, —Ç–æ —É –í–∞—Å –¥–≤–∞ –≤—ã–±–æ—Ä–∞:\n" \
                         f"1) –í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä—É\n" \
                         f"2) –í—ã —á–∏–Ω–∏—Ç–µ –º–æ–ø–µ–¥ —Å–∞–º–∏. –ù–∞—Ö–æ–¥–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∞, —Å–ø–µ—Ü. –°–¢–û. –°—Ç–∞–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏! –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç–µ –∞—Ä–µ–Ω–¥—É –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç–µ —Å —Ä–µ–º–æ–Ω—Ç–æ–º\n\n" \
                         f"PS. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º–æ–ø–µ–¥ –Ω–µ –±—ã–ª —Å–ª–æ–º–∞–Ω –ø–æ –í–∞—à–µ–π –≤–∏–Ω–µ –∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –º–∞—Å—Ç–µ—Ä, —Ç–æ –º—ã –í–∞–º —Å–¥–µ–ª–∞–µ–º –∑–∞–º–µ–Ω—É –º–æ–ø–µ–¥–∞"

        case HelpOptions.HELP4:
            reply_text = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —à—Ç—Ä–∞—Ñ –ø–æ –¥–Ω–µ–≤–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ–Ω–æ–º—É –ø–ª–∞–Ω—É 7000 —Ç–≥."

        case HelpOptions.HELP5:
            reply_text = f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞:\n" \
                         f"1) –ß–∞—Å—Ç–Ω—ã–π –¥–æ–º\n" \
                         f"2) C–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞\n" \
                         f"3) –û—Ö—Ä–∞–Ω—è–µ–º–æ–µ –ñ–ö —Å –∫–∞–º–µ—Ä–∞–º–∏, –æ—Ö—Ä–∞–Ω–æ–π, –∑–∞–±–æ—Ä–æ–º –≥–¥–µ –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–Ω–µ—Å—Ç–∏ –º–æ–ø–µ–¥ –±–µ–∑ –∫–ª—é—á–∞ –¥–æ–º–æ—Ñ–æ–Ω–∞. –ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–æ–∑–ª–µ –ø–æ–¥—å–µ–∑–¥–∞"

        case HelpOptions.HELP6:
            reply_text = f"–î–∞, —Ü–µ–Ω–∞ —Å Kaspi Red = –¶–µ–Ω–∞ + –ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞ (12.5%)"

        case HelpOptions.HELP7:
            reply_text = f"–û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –∑–∞ –º–æ–ø–µ–¥ ‚Äì 440 000 ‚Ç∏"

        case HelpOptions.HELP8:
            reply_text = f"–¶–µ–Ω—ã –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏:\n" \
                         f"- –ë–æ–∫–æ–≤–æ–π –æ–±—Ç–µ–∫–∞—Ç–µ–ª—å: 36 000 ‚Ç∏\n" \
                         f"- –ü–µ—Ä–µ–¥–Ω–∏–π –ø–∞—Ä—É—Å: 18 000 ‚Ç∏\n" \
                         f"- –ü–µ—Ä–µ–¥–Ω—è—è –Ω–∞–∫–ª–∞–¥–∫–∞: 20 000 ‚Ç∏\n" \
                         f"- –û–∫–∞–Ω—Ç–æ–≤–∫–∞ —Ñ–∞—Ä—ã: 12 000 ‚Ç∏\n" \
                         f"- –ü–ª–∞—Å—Ç–∏–∫ —Ä—É–ª—è (2 —á–∞—Å—Ç–∏): 36 000 ‚Ç∏\n" \
                         f"- –§–∞—Ä–∞: 8 500 ‚Ç∏\n" \
                         f"- –°—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª –≤ —Å–±–æ—Ä–µ: 14 000 ‚Ç∏\n" \
                         f"- –†—É—á–∫–∞ –≥–∞–∑–∞: 8 500 ‚Ç∏\n" \
                         f"- –ö–æ–ª–µ—Å–Ω—ã–π –¥–∏—Å–∫: 12 000 ‚Ç∏\n" \
                         f"- –ö—Ä—ã–ª–æ –ø–µ—Ä–µ–¥–Ω–µ–µ: 36 000 ‚Ç∏\n" \
                         f"- –ö–Ω–æ–ø–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: 3 600 ‚Ç∏\n" \
                         f"- –ó–µ—Ä–∫–∞–ª–∞ –∫–æ–º–ø–ª–µ–∫—Ç: 6 000 ‚Ç∏\n" \
                         f"- –ö–ª—é—á: 12 000 ‚Ç∏\n" \
                         f"- –ü–æ–∫—Ä—ã—à–∫–∞: 14 000 ‚Ç∏\n" \
                         f"- –ì–ª—É—à–∏—Ç–µ–ª—å: 24 000 ‚Ç∏\n" \
                         f"- –ß–µ—Ö–æ–ª —Å–∏–¥–µ–Ω–∏—è: 18 000 ‚Ç∏\n" \
                         f"- –®–ª–µ–º: 9 000 ‚Ç∏"

        case HelpOptions.HELP9:
            reply_text = f"–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç, –Ω–∞–±–µ—Ä–∏—Ç–µ –Ω–∞—Å –ø–æ –Ω–æ–º–µ—Ä—É —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –ø—É–Ω–∫—Ç–µ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è</b>"

    print(reply_text)
    await update.message.reply_text(
        reply_text,
        reply_markup=ReplyKeyboardMarkup(
            main_keyboard, one_time_keyboard=False, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        ),
        parse_mode=ParseMode.HTML
    )
    return ACTION


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    user = update.message.from_user
    await update.message.reply_text(
        f"Bye {user.name}! I hope we can talk again some day.", reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END
